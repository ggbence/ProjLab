//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data.MySqlClient;

public class ConcertDaO : DaO
{
	internal int writeConcertdata(string helyszin, string idopont, int koncertfelelos, int koncert_id, string megjegyzes, 
        List<KeyValuePair<int, KeyValuePair<bool, string>>> tervezett_reszvetel , List<KeyValuePair<int, bool>> resztvett, string vege)
    {
        MySqlDataReader rdr = null;
        int concertid = -1;

        try
        {
            // koncert tabla adatainak irasa
            // Query string 
            string strSQL = "INSERT INTO KONCERT (idopont, vege, helyszin, megjegyzes, users_id) VALUES " +
                "(@_idopont, @_vege, @_helyszin, @_megjegyzes, @_users_id); ";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_vege", vege);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);
            cmd.Parameters.AddWithValue("@_users_id", koncertfelelos);
            // Execute query
            if (cmd.ExecuteNonQuery() != 1)
            {
                return concertid;
            }


            // adatbazisba felvett koncert ID-janak lekerdezese

            string stm = "SELECT koncert_id FROM KONCERT where idopont=@_idopont AND vege=@_vege " +
                "AND helyszin=@_helyszin AND megjegyzes=@_megjegyzes AND users_id=@_users_id;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_vege", vege);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);
            cmd.Parameters.AddWithValue("@_users_id", koncertfelelos);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                concertid = rdr.GetInt32(0);
            }


            // tervezett reszvetel adatainak irasa
            // Query string 
            strSQL = "INSERT INTO KONCERT_RESZVETEL (koncert_id, users_id, tervezett_reszvetel, indoklas) VALUES " +
                "(@_koncert_id, @_users_id, @_tervezett_reszvetel, @_indoklas); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            
            for (int i=0; i<tervezett_reszvetel.Count; i++) 
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
                cmd.Parameters.AddWithValue("@_users_id", tervezett_reszvetel[i].Key );
                cmd.Parameters.AddWithValue("@_tervezett_reszvetel", tervezett_reszvetel[i].Value.Key );
                cmd.Parameters.AddWithValue("@_indoklas", tervezett_reszvetel[i].Value.Value);
                // Execute query
                cmd.ExecuteNonQuery();

            }


            // reszvetel adatainak irasa mar letezo rekordba
            // Query string
            strSQL = "UPDATE KONCERT_RESZVETEL SET resztvett=@_resztvett WHERE users_id=@_users_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < resztvett.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);
                
                // Execute query
                cmd.ExecuteNonQuery();

            }


            // reszvetel adatainak irasa azon zeneszek eseten, akiknek az adatait nem irtuk be az elozo lekerdezesekkel
            // Query string 
            strSQL = "INSERT INTO KONCERT_RESZVETEL (koncert_id, users_id, resztvett) VALUES " +
                "(@_koncert_id, @_users_id, @_resztvett); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < resztvett.Count; i++)
            {
                int j = 0;
                while ((j < tervezett_reszvetel.Count) && (tervezett_reszvetel[j].Key != resztvett[i].Key))
                {
                    j++;
                }
                if (j < tervezett_reszvetel.Count)
                {
                    // Add parameter
                    cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
                    cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);
                    cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                    // Execute query
                    cmd.ExecuteNonQuery();
                }
                

            }


            return concertid;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);
            return -1;
        }

        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

	}

    internal bool deleteMaterialdata(int koncertanyag_id)
	{

        try
        {
            // Query string 
            string strSQL = "DELETE FROM KONCERT_ZENESZ WHERE koncertanyag_id=@_koncertanyag_id";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_koncertanyag_id", koncertanyag_id);

            // Execute query
            if (cmd.ExecuteNonQuery() != 1)
            {
                return false;
            }


            // Query string 
            strSQL = "DELETE FROM KONCERTANYAG WHERE koncertanyag_id=@_koncertanyag_id";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_koncertanyag_id", koncertanyag_id);

            // Execute query
            if (cmd.ExecuteNonQuery() >= 0)
            {
                return true;
            }

        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);
        }

        return false;
	}


    internal bool deleteAllMaterialdata(List<int> koncertanyagok)
    {
        for (int i=0; i<koncertanyagok.Count; i++) 
        {
            deleteMaterialdata(koncertanyagok[i]);
        }
        return true;
    }


    internal List<int> getAllMaterial(int koncert_id)
	{
        
        MySqlDataReader rdr = null;

        var result = new List<int>();

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT koncertanyag_id FROM KONCERTANYAG where koncert_id=@_koncert_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();



            while (rdr.Read())
            { 
                result.Add(rdr.GetInt32(0));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;

	}

    internal KeyValuePair<bool, string> getTervezettReszvetel(int users_id, int koncert_id)
	{

        MySqlDataReader rdr = null;

        var result = new KeyValuePair<bool, string>();

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT tervezett_reszvetel, indoklas FROM KONCERT_RESZVETEL where koncert_id=@_koncert_id AND users_id=@_users_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result = new KeyValuePair<bool,string>(rdr.GetBoolean(0), rdr.GetString(1));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}

    internal bool getReszvetel(int users_id, int koncert_id)
    {

        MySqlDataReader rdr = null;

        bool result = false;

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT resztvett FROM KONCERT_RESZVETEL where koncert_id=@_koncert_id AND users_id=@_users_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result = rdr.GetBoolean(0);
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
    }


    internal List<KeyValuePair<int, bool>> getAllReszvetel(int koncert_id)
	{

        MySqlDataReader rdr = null;

        var result = new List<KeyValuePair<int, bool>>();

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT users_id, resztvett FROM KONCERT_RESZVETEL where koncert_id=@_koncert_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result.Add(new KeyValuePair<int, bool>(rdr.GetInt32(0), rdr.GetBoolean(1)));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}

    internal List<KeyValuePair<int, KeyValuePair<bool, string>>> getAllTervezettReszvetel(int koncert_id)
	{

        MySqlDataReader rdr = null;

        var result = new List<KeyValuePair<int, KeyValuePair<bool, string>>>();

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT users_id, tervezett_reszvetel, indoklas FROM KONCERT_RESZVETEL where koncert_id=@_koncert_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                var reszveteli_adatok = new KeyValuePair<bool, string>(rdr.GetBoolean(1), rdr.GetString(2));
                result.Add( new KeyValuePair<int, KeyValuePair<bool, string>>(rdr.GetInt32(0), reszveteli_adatok) );
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}

    
    internal List<int> getUsersParts(int users_id, int koncert_id)
	{

        MySqlDataReader rdr = null;

        var result = new List<int>();

        try
        {
            
            // szolam_id lekerdezese
            string stm = "SELECT szolam_id FROM KONCERT_ZENESZ WHERE koncert_id=@_koncert_id AND users_id=@_users_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();



            while (rdr.Read())
            {
                result.Add(rdr.GetInt32(0));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}

    internal bool modifyConcertdata(string helyszin, string idopont, int koncertfelelos, int koncert_id, string megjegyzes, 
        List<KeyValuePair<int, KeyValuePair<bool, string>>> tervezett_reszvetel , List<KeyValuePair<int, bool>> resztvett, string vege)
    {

        MySqlDataReader rdr = null;
        
        try
        {
            // koncert tabla adatainak irasa
            // Query string 
            string strSQL = "UPDATE KONCERT SET idopont=@_idopont, vege=@_vege, helyszin=@_helyszin, megjegyzes=@_megjegyzes, users_id=@_users_id " +
                "WHERE koncert_id=@_koncert_id; ";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_vege", vege);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);
            cmd.Parameters.AddWithValue("@_users_id", koncertfelelos);
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
            // Execute query
            if (cmd.ExecuteNonQuery() != 1)
            {
                return false;
            }


            // tervezett reszvetel adatainak irasa
            // Query string 
            strSQL = "DELETE FROM KONCERT_RESZVETEL WHERE koncert_id=@_koncert_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
               
            if (cmd.ExecuteNonQuery() < 0)
            {
                return false;
            }

            
            // tervezett reszvetel adatainak irasa 
            // Query string 
            strSQL = "INSERT INTO KONCERT_RESZVETEL (koncert_id, users_id, tervezett_reszvetel, indoklas) VALUES " +
                "(@_koncert_id, @_users_id, @_tervezett_reszvetel, @_indoklas); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < tervezett_reszvetel.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
                cmd.Parameters.AddWithValue("@_users_id", tervezett_reszvetel[i].Key);
                cmd.Parameters.AddWithValue("@_tervezett_reszvetel", tervezett_reszvetel[i].Value.Key);
                cmd.Parameters.AddWithValue("@_indoklas", tervezett_reszvetel[i].Value.Value);
                // Execute query
                if (cmd.ExecuteNonQuery() < 0)
                {
                    return false;
                }

            }

            // reszvetel adatainak irasa mar letezo rekordba
            // Query string
            strSQL = "UPDATE KONCERT_RESZVETEL SET resztvett=@_resztvett WHERE users_id=@_users_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            var ujresztvett = new List<KeyValuePair<int, bool>>();

            for (int i = 0; i < resztvett.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);

                // Execute query
                if (cmd.ExecuteNonQuery() == 0)
                {
                    ujresztvett.Add(resztvett[i]);
                }

            }

            if (ujresztvett.Count > 0)
            {
                // reszvetel adatainak irasa azon zeneszek eseten, akiknek az adatait nem irtuk be az elozo lekerdezesekkel
                // Query string 
                strSQL = "INSERT INTO KONCERT_RESZVETEL (koncert_id, users_id, resztvett) VALUES " +
                    "(@_koncert_id, @_users_id, @_resztvett); ";

                // Add query text
                cmd = new MySqlCommand(strSQL, this.Conn);

                // Prepare the query
                cmd.Prepare();


                for (int i = 0; i < ujresztvett.Count; i++)
                {
                   
                    // Add parameter
                    cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
                    cmd.Parameters.AddWithValue("@_users_id", ujresztvett[i].Key);
                    cmd.Parameters.AddWithValue("@_resztvett", ujresztvett[i].Value);
                    // Execute query
                    cmd.ExecuteNonQuery();
                    
                }
            }


            
            return true;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);
     
        }

        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }
        return false;
	}

    internal bool modifyReszvetel(int users_id, bool resztvesz, string indoklas, int koncert_id)
	{
        try
        {
            // tervezett reszvetel adatainak irasa
            // Query string 
            string strSQL = "UPDATE KONCERT_RESZVETEL SET tervezett_reszvetel=@_tervezett_reszvetel, indoklas=@_indoklas " +
                "WHERE koncert_id=@_koncert_id AND users_id=@_users_id;";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);
            cmd.Parameters.AddWithValue("@_tervezett_reszvetel", resztvesz);
            cmd.Parameters.AddWithValue("@_indoklas", indoklas);
            // Execute query
            if (cmd.ExecuteNonQuery() == 0)
            {
                return false;
            }
            return true;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);
     
        }
        return false;
        
	}

    internal string[] readConcertdata(int koncert_id, ref List<KeyValuePair<int, KeyValuePair<bool, string>>> tervezett_reszvetel, ref List<KeyValuePair<int, bool>> resztvett)
	{

        MySqlDataReader rdr = null;

        var result = new string[6];

        try
        {

            // user adatok lekerdezese

            string stm = "SELECT koncert_id, idopont, vege, helyszin, megjegyzes, " +
             "users_id FROM KONCERT WHERE koncert_id=@_koncert_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();



            while (rdr.Read())
            {
                for (int i = 0; i < 6; i++)
                {
                    result[i] = rdr.GetString(i);
                }
            }



            //tervezett reszvetelek listajanak lekerdezese

            var tervezett_lekerdezes = new List<KeyValuePair<int, KeyValuePair<bool, string>>>();

            stm = "SELECT users_id, tervezett_reszvetel, indoklas FROM KONCERT_RESZVETEL "
                + "WHERE koncert_id=@_koncert_id;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int user = rdr.GetInt32(0);
                bool tervreszvet = rdr.GetBoolean(1);
                string indoklas = rdr.GetString(2);

                tervezett_lekerdezes.Add(new KeyValuePair<int, KeyValuePair<bool, string>>(user, new KeyValuePair<bool, string>(tervreszvet, indoklas)));
            }

            // tervezett reszvetelek listajanak atadasa parameterben
            tervezett_reszvetel = tervezett_lekerdezes;


            //tervezett reszvetelek listajanak lekerdezese

            var resztvevok_lekerdezes = new List<KeyValuePair<int, bool>>();

            stm = "SELECT users_id, resztvett FROM KONCERT_RESZVETEL "
                + "WHERE koncert_id=@_koncert_id;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_koncert_id", koncert_id);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int user = rdr.GetInt32(0);
                bool valos_reszvetel = rdr.GetBoolean(1);

                resztvevok_lekerdezes.Add(new KeyValuePair<int, bool>(user, valos_reszvetel));
            }

            // user hangszerek listajanak atadasa parameterben
            resztvett = resztvevok_lekerdezes; 


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;

	}

}

