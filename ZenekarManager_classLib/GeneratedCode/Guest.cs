//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

public class Guest
{
    public const int REGISZTRALT = 1;
    public const int ZENÉSZ = 2;
    public const int MANAGER = 3;

	private string email;

    public string Email
    {
      get { return email; }
      set { email = value; }
    }


    private string password;

    public string Password
    {
        get { return password; }
        set { password = getHash(value); }
    }


    private GuestDaO guestDaO;


    public Guest()
    {
        guestDaO = new GuestDaO();
        password = "";
        email = "";
    }

    public string getHash(string data)
    {
        //create new instance of md5
        SHA1 sha1 = SHA1.Create();

        //convert the input text to array of bytes
        byte[] hashData = sha1.ComputeHash(Encoding.Default.GetBytes(data));

        //create new instance of StringBuilder to save hashed data
        StringBuilder returnValue = new StringBuilder();

        //loop for each byte and add it to StringBuilder
        for (int i = 0; i < hashData.Length; i++)
        {
            returnValue.Append(hashData[i].ToString());
        }

        // return hexadecimal string
        return returnValue.ToString();
    }


    public bool checkEmail()
    {
        return guestDaO.checkEmailaddr(email);
    }

	public User signUp(string email, string nev, string password)
	{
        if (!checkEmail())
        {
            User user = new User();
            user.Users_email = email;
            user.Users_nev = nev;
            user.Users_password = getHash(password);
            user.Jogkor_id = 1;
            if (user.createProfile())
            {
                return user;
            }
        }
        return null;
	}

	public User signIn()
	{
        if (guestDaO.checkUserdata(email, password))
        {
            User user = new User();
            user.readProfile(email);

            if (user.Jogkor_id == 3)
            {
                Manager manager = new Manager();
                manager.readProfile(email);
                return manager;

            }
            else
            {
                return user;
            }
            
        }
        else
        {
            return null;
        }
	}

	public bool checkUser()
	{
        return guestDaO.checkUserdata(email, password);
	}

	public string newPass()
	{
        var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        var result = new string(
            Enumerable.Repeat(chars, 8)
                      .Select(s => s[random.Next(s.Length)])
                      .ToArray());

        this.Password = result;

        if (email.Length!=0)
        {
            if (guestDaO.writeNewPass(email, password))
            {
                return result;
            }
        }

        return null;

	}
    

    public List<KeyValuePair<int, KeyValuePair<string, int>>> getInstruments()
    {
        return guestDaO.getAllInstrument();
    }


    public List<KeyValuePair<int, string>> getInstrumentTypes()
    {
        return guestDaO.getAllInstrumentType();
    }

}

