//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data.MySqlClient;


public class GuestDaO : DaO
{

	internal bool checkUserdata(string email, string password)
	{

        MySqlDataReader rdr = null;

        string result;

        try
        {

            string stm = "SELECT users_id FROM USERS where users_email=@_email AND users_password=@_password";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_email", email);
            cmd.Parameters.AddWithValue("@_password", password);

            rdr = cmd.ExecuteReader();


            int j = 0;
            while (rdr.Read())
            {
                result = rdr.GetString(0);
                j++;
            }

            if (j == 1)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());
            return false;

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

	}


	internal bool writeNewPass(string email, string password)
	{
        string strSQL = "UPDATE USERS SET users_password=@_password WHERE users_email=@_email";

        // Add query text
        MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

        // Prepare the query
        cmd.Prepare();

        // Add parameter
        cmd.Parameters.AddWithValue("@_email", email);
        cmd.Parameters.AddWithValue("@_password", password);

        // Execute query
        if (cmd.ExecuteNonQuery() == 1)
        {
            return true;
        }
        return false;
	}


    internal bool checkEmailaddr(string email)
    {

        MySqlDataReader rdr = null;

        string result;

        try
        {

            string stm = "SELECT users_id FROM USERS where users_email=@_email";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_email", email);

            rdr = cmd.ExecuteReader();


            int j = 0;
            while (rdr.Read())
            {
                result = rdr.GetString(0);
                j++;
            }

            if (j == 1)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());
            return false;

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

    }

    internal List<KeyValuePair<int, KeyValuePair<string, int>>> getAllInstrument()
    {

        MySqlDataReader rdr = null;

        // hangszer_id, hangszer_nev, hangszertipus_id
        var result = new List<KeyValuePair<int, KeyValuePair<string, int>>>();

        try
        {

            // hangszerek listajanak lekerdezese az adatbazisbol
            string stm = "SELECT hangszer_id, hangszer_nev, hangszertipus_id FROM HANGSZER ORDER BY hangszer_id ASC";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int hangszer_id = rdr.GetInt32(0);
                string hangszer_nev = rdr.GetString(1);
                int tipus_id = rdr.GetInt32(2);

                result.Add(new KeyValuePair<int, KeyValuePair<string, int>>(hangszer_id, new KeyValuePair<string, int>(hangszer_nev, tipus_id)));
            }

        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
    }

    internal List<KeyValuePair<int, string>> getAllInstrumentType()
    {
        MySqlDataReader rdr = null;

        var result = new List<KeyValuePair<int, string>>();

        try
        {

            string stm = "SELECT hangszertipus_id, hangszertipus_nev FROM HANGSZERTIPUS ORDER BY hangszertipus_id ASC";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int key = rdr.GetInt32(0);
                string value = rdr.GetString(1);

                result.Add(new KeyValuePair<int, string>(key, value));
            }

        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
    }
}

