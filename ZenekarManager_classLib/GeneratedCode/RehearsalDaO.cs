//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MySql.Data.MySqlClient;

public class RehearsalDaO : DaO
{
	internal int writeRehearsalData(string helyszin, string idopont, string megjegyzes, int proba_id, 
        List<KeyValuePair<int, bool>> resztvett, List<KeyValuePair<int, KeyValuePair<bool, string>>>  tervezett_reszvetel)
	{

        MySqlDataReader rdr = null;
        int probaid = -1;

        try
        {
            // proba tabla adatainak irasa
            // Query string 
            string strSQL = "INSERT INTO PROBA (idopont, helyszin, megjegyzes) VALUES " +
                "(@_idopont, @_helyszin, @_megjegyzes); ";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);
            // Execute query
            if (cmd.ExecuteNonQuery() != 1)
            {
                return probaid;
            }


            // adatbazisba felvett proba ID-janak lekerdezese

            string stm = "SELECT proba_id FROM PROBA where idopont=@_idopont " +
                "AND helyszin=@_helyszin AND megjegyzes=@_megjegyzes;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                probaid = rdr.GetInt32(0);
            }


            // tervezett reszvetel adatainak irasa
            // Query string 
            strSQL = "INSERT INTO PROBA_RESZVETEL (proba_id, users_id, tervezett_reszvetel, indoklas) VALUES " +
                "(@_proba_id, @_users_id, @_tervezett_reszvetel, @_indoklas); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < tervezett_reszvetel.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_proba_id", proba_id);
                cmd.Parameters.AddWithValue("@_users_id", tervezett_reszvetel[i].Key);
                cmd.Parameters.AddWithValue("@_tervezett_reszvetel", tervezett_reszvetel[i].Value.Key);
                cmd.Parameters.AddWithValue("@_indoklas", tervezett_reszvetel[i].Value.Value);
                // Execute query
                cmd.ExecuteNonQuery();

            }


            // reszvetel adatainak irasa mar letezo rekordba
            // Query string
            strSQL = "UPDATE PROBA_RESZVETEL SET resztvett=@_resztvett WHERE users_id=@_users_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < resztvett.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);

                // Execute query
                cmd.ExecuteNonQuery();

            }


            // reszvetel adatainak irasa azon zeneszek eseten, akiknek az adatait nem irtuk be az elozo lekerdezesekkel
            // Query string 
            strSQL = "INSERT INTO PROBA_RESZVETEL (proba_id, users_id, resztvett) VALUES " +
                "(@_proba_id, @_users_id, @_resztvett); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < resztvett.Count; i++)
            {
                int j = 0;
                while ((j < tervezett_reszvetel.Count) && (tervezett_reszvetel[j].Key != resztvett[i].Key))
                {
                    j++;
                }
                if (j < tervezett_reszvetel.Count)
                {
                    // Add parameter
                    cmd.Parameters.AddWithValue("@_proba_id", proba_id);
                    cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);
                    cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                    // Execute query
                    cmd.ExecuteNonQuery();
                }


            }


            return probaid;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);
            return -1;
        }

        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }
	}


    internal List<KeyValuePair<int, bool>> getAllReszvetel(int proba_id)
	{

        MySqlDataReader rdr = null;

        var result = new List<KeyValuePair<int, bool>>();

        try
        {

            // proba reszvetel adatok lekerdezese
            string stm = "SELECT users_id, resztvett FROM PROBA_RESZVETEL where proba_id=@_proba_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result.Add(new KeyValuePair<int, bool>(rdr.GetInt32(0), rdr.GetBoolean(1)));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}


    internal bool getReszvetel(int proba_id, int users_id)
	{

        MySqlDataReader rdr = null;

        bool result = false;

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT resztvett FROM PROBA_RESZVETEL where proba_id=@_proba_id AND users_id=@_users_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result = rdr.GetBoolean(0);
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}


    internal KeyValuePair<bool, string> getTervezettReszvetel(int proba_id, int users_id)
	{

        MySqlDataReader rdr = null;

        var result = new KeyValuePair<bool, string>();

        try
        {

            // user adatok lekerdezese
            string stm = "SELECT tervezett_reszvetel, indoklas FROM PROBA_RESZVETEL where proba_id=@_proba_id AND users_id=@_users_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();


            while (rdr.Read())
            {
                result = new KeyValuePair<bool, string>(rdr.GetBoolean(0), rdr.GetString(1));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}


    internal List<int> getUsersParts(int users_id)
	{

        MySqlDataReader rdr = null;

        var result = new List<int>();

        try
        {

            // szolam_id lekerdezese
            string stm = "SELECT PZ.szolam_id FROM PROBA_ZENESZ PZ INNER JOIN PROBAANYAG PA ON PZ.probaanyag_id=PA.probaanyag_id " +
                "WHERE PZ.users_id=@_users_id AND PA.probaanyag_aktiv=true;";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_users_id", users_id);

            rdr = cmd.ExecuteReader();



            while (rdr.Read())
            {
                result.Add(rdr.GetInt32(0));
            }


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}


    internal bool modifyRehearsalData(string helyszin, string idopont, string megjegyzes, int proba_id, 
        List<KeyValuePair<int, bool>> resztvett, List<KeyValuePair<int, KeyValuePair<bool, string>>> tervezett_reszvetel)
	{

        MySqlDataReader rdr = null;

        try
        {
            // koncert tabla adatainak irasa
            // Query string 
            string strSQL = "UPDATE PROBA SET idopont=@_idopont, helyszin=@_helyszin, megjegyzes=@_megjegyzes " +
                "WHERE proba_id=@_proba_id; ";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_idopont", idopont);
            cmd.Parameters.AddWithValue("@_helyszin", helyszin);
            cmd.Parameters.AddWithValue("@_megjegyzes", megjegyzes);
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);
            // Execute query
            if (cmd.ExecuteNonQuery() != 1)
            {
                return false;
            }


            // tervezett reszvetel adatainak irasa
            // Query string 
            strSQL = "DELETE FROM PROBA_RESZVETEL WHERE proba_id=@_proba_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            cmd.Parameters.AddWithValue("@_proba_id", proba_id);

            if (cmd.ExecuteNonQuery() < 0)
            {
                return false;
            }


            // tervezett reszvetel adatainak irasa 
            // Query string 
            strSQL = "INSERT INTO PROBA_RESZVETEL (proba_id, users_id, tervezett_reszvetel, indoklas) VALUES " +
                "(@_proba_id, @_users_id, @_tervezett_reszvetel, @_indoklas); ";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();


            for (int i = 0; i < tervezett_reszvetel.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_proba_id", proba_id);
                cmd.Parameters.AddWithValue("@_users_id", tervezett_reszvetel[i].Key);
                cmd.Parameters.AddWithValue("@_tervezett_reszvetel", tervezett_reszvetel[i].Value.Key);
                cmd.Parameters.AddWithValue("@_indoklas", tervezett_reszvetel[i].Value.Value);
                // Execute query
                if (cmd.ExecuteNonQuery() < 0)
                {
                    return false;
                }

            }

            // reszvetel adatainak irasa mar letezo rekordba
            // Query string
            strSQL = "UPDATE PROBA_RESZVETEL SET resztvett=@_resztvett WHERE users_id=@_users_id;";

            // Add query text
            cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            var ujresztvett = new List<KeyValuePair<int, bool>>();

            for (int i = 0; i < resztvett.Count; i++)
            {
                // Add parameter
                cmd.Parameters.AddWithValue("@_resztvett", resztvett[i].Value);
                cmd.Parameters.AddWithValue("@_users_id", resztvett[i].Key);

                // Execute query
                if (cmd.ExecuteNonQuery() == 0)
                {
                    ujresztvett.Add(resztvett[i]);
                }

            }

            if (ujresztvett.Count > 0)
            {
                // reszvetel adatainak irasa azon zeneszek eseten, akiknek az adatait nem irtuk be az elozo lekerdezesekkel
                // Query string 
                strSQL = "INSERT INTO PROBA_RESZVETEL (proba_id, users_id, resztvett) VALUES " +
                    "(@_proba_id, @_users_id, @_resztvett); ";

                // Add query text
                cmd = new MySqlCommand(strSQL, this.Conn);

                // Prepare the query
                cmd.Prepare();


                for (int i = 0; i < ujresztvett.Count; i++)
                {

                    // Add parameter
                    cmd.Parameters.AddWithValue("@_proba_id", proba_id);
                    cmd.Parameters.AddWithValue("@_users_id", ujresztvett[i].Key);
                    cmd.Parameters.AddWithValue("@_resztvett", ujresztvett[i].Value);
                    // Execute query
                    cmd.ExecuteNonQuery();

                }
            }

            return true;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);

        }

        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }
        return false;

	}


    internal bool modifyReszvetel(int proba_id, int users_id, bool resztvesz, string indoklas)
	{

        try
        {
            // tervezett reszvetel adatainak irasa
            // Query string 
            string strSQL = "UPDATE PROBA_RESZVETEL SET tervezett_reszvetel=@_tervezett_reszvetel, indoklas=@_indoklas " +
                "WHERE proba_id=@_proba_id AND users_id=@_users_id;";

            // Add query text
            MySqlCommand cmd = new MySqlCommand(strSQL, this.Conn);

            // Prepare the query
            cmd.Prepare();

            // Add parameter
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);
            cmd.Parameters.AddWithValue("@_users_id", users_id);
            cmd.Parameters.AddWithValue("@_tervezett_reszvetel", resztvesz);
            cmd.Parameters.AddWithValue("@_indoklas", indoklas);
            // Execute query
            if (cmd.ExecuteNonQuery() == 0)
            {
                return false;
            }
            return true;
        }
        catch (MySqlException ex)
        {
            Console.WriteLine("MySQL error. Number: " + ex.Number);

        }
        return false;
	}

    internal String[] readRehearsalData(int proba_id, ref List<KeyValuePair<int, bool>> resztvett, ref List<KeyValuePair<int, KeyValuePair<bool, string>>> tervezett_reszvetel)
	{

        MySqlDataReader rdr = null;

        var result = new string[4];

        try
        {

            // user adatok lekerdezese

            string stm = "SELECT proba_id, idopont, helyszin, megjegyzes FROM PROBA WHERE proba_id=@_proba_id";

            MySqlCommand cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);

            rdr = cmd.ExecuteReader();



            while (rdr.Read())
            {
                for (int i = 0; i < 4; i++)
                {
                    result[i] = rdr.GetString(i);
                }
            }



            //tervezett reszvetelek listajanak lekerdezese

            var tervezett_lekerdezes = new List<KeyValuePair<int, KeyValuePair<bool, string>>>();

            stm = "SELECT users_id, tervezett_reszvetel, indoklas FROM PROBA_RESZVETEL "
                + "WHERE proba_id=@_proba_id;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int user = rdr.GetInt32(0);
                bool tervreszvet = rdr.GetBoolean(1);
                string indoklas = rdr.GetString(2);

                tervezett_lekerdezes.Add(new KeyValuePair<int, KeyValuePair<bool, string>>(user, new KeyValuePair<bool, string>(tervreszvet, indoklas)));
            }

            // tervezett reszvetelek listajanak atadasa parameterben
            tervezett_reszvetel = tervezett_lekerdezes;


            //tervezett reszvetelek listajanak lekerdezese

            var resztvevok_lekerdezes = new List<KeyValuePair<int, bool>>();

            stm = "SELECT users_id, resztvett FROM PROBA_RESZVETEL "
                + "WHERE proba_id=@_proba_id;";

            cmd = new MySqlCommand(stm, this.Conn);

            cmd.Prepare();
            cmd.Parameters.AddWithValue("@_proba_id", proba_id);

            rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                int user = rdr.GetInt32(0);
                bool valos_reszvetel = rdr.GetBoolean(1);

                resztvevok_lekerdezes.Add(new KeyValuePair<int, bool>(user, valos_reszvetel));
            }

            // reszvetel listajanak atadasa parameterben
            resztvett = resztvevok_lekerdezes;


        }
        catch (MySqlException ex)
        {
            Console.WriteLine("Error: {0}", ex.ToString());

        }
        finally
        {
            if (rdr != null)
            {
                rdr.Close();
            }

        }

        // Return with the result string
        return result;
	}

}

